@using Domain.Extensions
@using Domain.Services.Intefaces.Account
@using Infraestructure.Services.Authentication
@using System.Text.Json
@inherits LayoutComponentBase
@inject IJSRuntime _jsRuntime
@inject IAccountServices _accountServices
@inject TokenAuthenticationProvider _tokenAuthenticationProvider
@inject NavigationManager _navigationManager
<AuthorizeView>
    <Authorized>
        <div class="page">
            <div class="sidebar">
                <NavMenu />
            </div>
            <main>
                <article class="content">
                    @Body
                </article>
            </main>

            <UI.Pages.Components.SuccessModal EventCallback="RedirectToIndex" />


            <div class="modal" id="companyCreateFailureModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-backdrop="static">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content mb-3">
                        <div class="modal-header" style="border:none;">
                            <h1 class="modal-title fs-5" id="ModalFailureToggleLabel">Error</h1>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body" style="border:none;">
                            <i class="bi bi-exclamation-triangle-fill text-danger ms-3 mt-5 fs-4"></i>
                            <label id="txtCompanyCreateFailureModal" class="form-label ms-1 p-3"></label>
                        </div>
                        <div class="modal-footer" style="border:none;">
                            <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">OK</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        <UI.Pages.Account.SignIn />
    </NotAuthorized>
</AuthorizeView>

@code {

    private string _userName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await _tokenAuthenticationProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        var claims = user.Claims.ToList();

        if (claims.Count > 0)
            _userName = claims[0].Value;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        string token = await _jsRuntime.GetFromLocalStorage(TokenAuthenticationProvider.TokenKey);

        if (!firstRender && !_navigationManager.Uri.Contains("signin"))
            await RefreshTokenAsync(token);
    }

    private async Task LogoutAsync() => await _tokenAuthenticationProvider.Logout();

    private async Task RefreshTokenAsync(string token)
    {
        try
        {
            bool tokenIsValid = JwtExtensions.CheckTokenIsValid(token);

            if (!tokenIsValid && !string.IsNullOrEmpty(token))
            {
                var responseModel = await _accountServices.RefreshAsync(token);
                Console.WriteLine(JsonSerializer.Serialize(responseModel.Message));
            }
        }
        catch (ArgumentException arg)
        {
            Console.WriteLine(arg.Message);
            await _tokenAuthenticationProvider.Logout();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private void RedirectToIndex() => _navigationManager.NavigateTo("/");

}