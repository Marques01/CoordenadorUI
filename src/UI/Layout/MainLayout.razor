@using Domain.Extensions
@using Domain.Services.Intefaces.Account
@using Infraestructure.Services.Authentication
@using System.Text.Json
@inherits LayoutComponentBase
@inject IJSRuntime _jsRuntime
@inject IAccountServices _accountServices
@inject TokenAuthenticationProvider _tokenAuthenticationProvider
@inject NavigationManager _navigationManager
<AuthorizeView>
    <Authorized>
        <div class="page">
            <div class="sidebar">
                <NavMenu />
            </div>
            <main>
                <article class="content">
                    @Body
                </article>
            </main>
        </div>

    </Authorized>
    <NotAuthorized>
        <UI.Pages.Account.SignIn />
    </NotAuthorized>
</AuthorizeView>

@code {

    private string _userName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await _tokenAuthenticationProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        var claims = user.Claims.ToList();

        if (claims.Count > 0)
            _userName = claims[0].Value;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        string token = await _jsRuntime.GetFromLocalStorage(TokenAuthenticationProvider.TokenKey);

        if (!firstRender && !_navigationManager.Uri.Contains("signin"))
            await RefreshTokenAsync(token);
    }

    private async Task LogoutAsync() => await _tokenAuthenticationProvider.Logout();

    private async Task RefreshTokenAsync(string token)
    {
        try
        {
            bool tokenIsValid = JwtExtensions.CheckTokenIsValid(token);

            if (!tokenIsValid && !string.IsNullOrEmpty(token))
            {
                var responseModel = await _accountServices.RefreshAsync(token);
                Console.WriteLine(JsonSerializer.Serialize(responseModel.Message));
            }
        }
        catch (ArgumentException arg)
        {
            Console.WriteLine(arg.Message);
            await _tokenAuthenticationProvider.Logout();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

}